package app.roam.se.ui.dialogs;

import app.roam.se.models.test.TestData;
import app.roam.se.ui.common.UIUtil;
import app.roam.se.ui.misc.Icons;
import app.roam.se.utils.DBUtil;
import app.roam.se.utils.TextUtil;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseDialog extends JDialog {
    private JPanel contentPane;
    private JButton insertButton;
    private JButton buttonCancel;
    private JButton updateButton;
    private JButton deleteButton;
    private JTable table;

    public DatabaseDialog() {
        setIconImage(Icons.getLogo());
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(insertButton);

        insertButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                insertData();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        refreshTable();

        refreshTable();
        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = Integer.parseInt(table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
                DataEditorDialog.showDialog(row);
                refreshTable();
            }
        });
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = Integer.parseInt(table.getModel().getValueAt(table.getSelectedRow(), 0).toString());
                if (UIUtil.showYesNoDialog(null, "Delete", "Are you sure you like to delete data with id " + row + "?")) {
                    DBUtil.deleteData(row);
                    refreshTable();
                }
            }
        });
    }

    private void insertData() {
        DataEditorDialog.showDialog(-1);
        refreshTable();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void showDialog() {
        DatabaseDialog dialog = new DatabaseDialog();
        dialog.setTitle("Data Table");
        dialog.refreshTable();
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);

    }

    public void refreshTable() {
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        final List<TestData> tds = DBUtil.getAllData();
        Object[][] data = new String[tds.size()][6];
        List<String> envi = new ArrayList<String>();
        List<String> vars = new ArrayList<String>();
        for (int i = 0; i < tds.size(); i++) {
            data[i][0] = String.valueOf(tds.get(i).getId());
            data[i][1] = tds.get(i).getCategory();
            data[i][2] = tds.get(i).getSubCategory();
            data[i][3] = tds.get(i).getDataGroup();
            data[i][4] = tds.get(i).getLabel();
            data[i][5] = tds.get(i).getValue();
            envi.add(tds.get(i).getCategory());
            vars.add(tds.get(i).getSubCategory());

        }
        envi = TextUtil.removeDuplicates(envi);
        vars = TextUtil.removeDuplicates(vars);
        table.setModel(new DataTableModel());
        table.setAutoCreateRowSorter(true);
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateButton.setEnabled(table.getSelectedRowCount() == 1);
                deleteButton.setEnabled(table.getSelectedRowCount() == 1);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setPreferredSize(new Dimension(500, 250));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        insertButton = new JButton();
        insertButton.setText("Insert");
        panel2.add(insertButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateButton = new JButton();
        updateButton.setEnabled(false);
        updateButton.setText("Update");
        panel2.add(updateButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setEnabled(false);
        deleteButton.setText("Delete");
        panel2.add(deleteButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table = new JTable();
        scrollPane1.setViewportView(table);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    public class DataTableModel extends AbstractTableModel {

        @Override
        public String getColumnName(int arg0) {
            return headers[arg0];
        }

        private static final long serialVersionUID = 1L;
        String[] headers = {"ID", "Category", "Sub-Category", "Data Group", "Label", "Value"};
        List<TestData> tds = DBUtil.getAllData();

        @Override
        public int getColumnCount() {
            // TODO Auto-generated method stub
            return 6;
        }

        @Override
        public int getRowCount() {
            // TODO Auto-generated method stub
            return tds.size();
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if (tds.size() == 0) {
                return Object.class;
            }
            return getValueAt(0, columnIndex).getClass();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.valueOf(tds.get(rowIndex).getId());
                case 1:
                    return tds.get(rowIndex).getCategory();
                case 2:
                    return tds.get(rowIndex).getSubCategory();
                case 3:
                    return tds.get(rowIndex).getDataGroup();
                case 4:
                    return tds.get(rowIndex).getLabel();
                case 5:
                    return tds.get(rowIndex).getValue();
                default:
                    return "";
            }
        }

    }

    public class DataTableHeader extends DefaultTableModel {

        private static final long serialVersionUID = 1L;

    }
}
